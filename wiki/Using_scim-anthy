<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Tokyo Linux Users Group</title>
    <link rel="stylesheet" href="/css/tlug4.css" type="text/css" />
  </head>

  <body>
    <div id="top">
      <div id="sponsor">
        <!--<p>Hosted by <a href="http://asahi-net.jp/en/">ASAHI Net</a>, provider of mobile and fixed broadband <br/>Internet services to individuals and corporations.
        </p>-->
      </div>

      <div id="lang_options">
        <p>| <a href="/index.html">English</a> | <a href="/index.ja.html">日本語</a> |</p>
      </div>

      <div id="logo">
        <a href="/"><img src="/images/shirt200.png" alt="logo" /></a>
      </div>

      <h1 id="header">
        Tokyo Linux Users Group
      </h1>
    </div>

    <div id="menu">
      <div class="search">
        <!-- <h2>Search</h2> -->

        <!-- Google CSE Search Box Begins -->
        <img src="https://www.google.com/coop/images/google_custom_search_smwide.gif" alt="Google Custom Search" />
        <form id="searchbox_012202592177554568923:r_bafg63erq" action="https://www.google.com/cse" name="searchbox_012202592177554568923:r_bafg63erq">
	  <input type="hidden" name="cx" value="012202592177554568923:r_bafg63erq" />
	  <input type="hidden" name="cof" value="FORID:0" />
	  <input type="text" size="25" name="q" />
	  <input id="searchgo" type="submit" value="Go" />
        </form>

        <!-- Google CSE Search Box Ends -->
      </div>

      <div class="items">
        <div id="general_menu">
	  <h2>General</h2>

	  <ul>
	    <li><a href="/wiki/TLUG:MemberGuide" title="Member Guide">Guide</a></li>

            <!--	  <li><a href="http://articles.tlug.jp/" title="Featured Articles">Articles</a></li>
            -->

	    <li><a href="/wiki/" title="Wiki">Wiki</a></li>

	    <li><a href="/wiki/TLUG:Organization" title="TLUG Officers">Organization</a></li>
	  </ul>
        </div>

        <div id="meetings_menu">
	  <h2>Meetings</h2>

	  <ul>
	    <li><a href="/wiki/Current_Meeting" title="Next Meeting">Next Meeting</a></li>

	    <li><a href="/wiki/Meetings" title="Past Meetings">Past Meetings</a></li>
	  </ul>
        </div>

        <div id="mls_menu">
	  <h2>Mailing Lists</h2>

	  <ul>
	    <li><a href="http://lists.tlug.jp/listpolicy.html" title="TLUG mailing list policies">List Policy</a></li>

	    <li id="mllists"><a href="http://lists.tlug.jp/list.html" title="TLUG mailing lists">Lists</a>
	    <ul>
	      <li><a href="http://lists.tlug.jp/ML/index.html" title="Archives of TLUG Main ML">Tlug</a></li>

	      <li>
	        <a href="http://lists.tlug.jp/MLadm/index.html" title="Archives of TLUG Admin ML">Tlug-admin</a><br/>
	        Access Info:<br/><img src="/images/tlug-uname.png" alt="uname"/>/<img src="/images/tlug-pword.png" alt="pw"/><br/>
	      </li>

	      <li><a href="http://lists.tlug.jp/MLlingo/index.html" title="Archives of TLUG Lingo ML">Tlug-lingo</a></li>

	    </ul>
	    </li>
          </ul>
        </div>

        <div id="other_groups_menu">
          <h2>Other Groups</h2>

          <ul>
	    <li><a href="https://ringo.net" title="The English based Mac Users Group in Tokyo">Tokyo Ringo MUG</a></li>

	    <li><a href="http://zaurus.biojapan.de/" title="Zaurus Otaku Kurabu">ZOK</a></li>
          </ul>
        </div>

        <div id="hosting_menu">
          <h2>Site Information</h2>
          <p>
            This site is built with
            <a href="https://jaspervdj.be/hakyll/">Hakyll</a>
            from GitHub repo
            <a href="https://github.com/tlug/tlug.jp">
              <code>tlug/tlug.jp</code></a>.
          </p>
        </div>

        <div id="validator_logos_menu"></div>
      </div>
    </div>

    <div class="content">
      <h2 id="the_super_quick_version">The Super Quick Version</h2>
<p>This will work in most versions of Linux. This quick guide is aimed towards a Linux using beginner who boots into X. <a href="#FreeBSD" title="wikilink">#FreeBSD</a> and <a href="#NetBSD" title="wikilink">#NetBSD</a> have their own sections, each beginning with a quickstart guide. (Actually, the quickstart guide for NetBSD uses uim rather than scim, but at present, I don't think it really merits a separate page.)</p>
<ul>
<li>If your system has a package for scim-anthy, and has a package manager that tracks dependencies, install scim-anthy which will pull in scim and anthy. If you have to install from source, install anthy first, then scim, then scim-anthy (See <a href="#Installation" title="wikilink">#Installation</a>)</li>
</ul>
<ul>
<li>Add to your .bash_profile</li>
</ul>
<p><code>export XMODIFIERS='@im=SCIM'</code><br />
<code>export LC_CTYPE=ja_JP.utf8  </code><br />
<code>export GTK_IM_MODULE=“scim”</code><br />
<code>export QT_IM_MODULE=“scim”</code><br />
<code>scim -d</code></p>
<p>(See <a href="#Environment" title="wikilink">#Environment</a>, <a href="#Locale" title="wikilink">#Locale</a> and <a href="#Starting_Scim" title="wikilink">#Starting Scim</a>)</p>
<ul>
<li>Make sure you have Japanese fonts (See <a href="#Fonts" title="wikilink">#Fonts</a>)</li>
</ul>
<ul>
<li>Make sure you have a ja_JP UTF-8 locale (See <a href="#Locale" title="wikilink">#Locale</a>)</li>
</ul>
<p><code>locale -a |grep ja_JP </code></p>
<ul>
<li>If you will be using Japanese in a terminal as well as, say firefox, make sure you have a UTF-8 capable</li>
</ul>
<p>terminal. (See <a href="#Terminals" title="wikilink">#Terminals</a>)</p>
<ul>
<li>Log out and log back in</li>
<li>Start scim with Ctrl+space</li>
<li>Type in something in romaji, it will appear as hiragana (See <a href="#Using_scim" title="wikilink">#Using scim</a>)</li>
<li>Hit the space bar to bring up kanji selection</li>
<li>Navigate the kanji selection with the arrow keys</li>
<li>Hit space to select your kanji</li>
<li>Hit enter</li>
<li>When done inputting Japanese, hit Ctl+space again to turn it off.</li>
</ul>
<p>If you boot into console mode rather than boot into an Xsession, add the export and scim -d lines to your
.xinitrc rather than your bash profile. Add them above the line that calls the window manager.</p>
<h2 id="would_you_explain_that_please_it_didnt_work">Would you explain that please? It didn't work</h2>
<p>Ok, the <strong>much</strong> longer version.</p>
<h2 id="installation">Installation</h2>
<p>Japanese in Linux and other Unix like systems, becomes easier all the time. Most of this howto will focus on using the <a href="http://sourceforge.net/project/showfiles.php?group_id=108454/">scim</a> editor, <a href="http://sourceforge.jp/projects/anthy/">anthy</a> conversion method and <a href="http://sourceforge.jp/projects/scim-imengine/">scim-anthy</a> input engine. Note that this howto will only refer to inputting Japanese in X, not the console.</p>
<p>Most distributions now have packages for scim, anthy and scim-anthy. As scim-anthy needs anthy and scim to work, a package manager that takes care of dependencies (e.g., apt, yum, pacman and emerge) should install all three programs. For example, in Ubuntu, one can do</p>
<p><code>apt-get install scim-anthy</code></p>
<p>This will also install scim and scim-anthy.</p>
<p>If your distribution doesn't have a scim-anthy package, and you have to build it from source, do it in the following order. Download and install <a href="http://sourceforge.jp/projects/anthy/">anthy</a>. After downloading the tarball</p>
<p><code>tar zxvf anthy-</code><version><code>.tar.gz</code><br />
<code>cd anthy-</code><version><br />
<code>./configure --prefix=/usr &amp;&amp; make &amp;&amp; make install </code></p>
<p>Replace <version> with whatever version you download, I believe it's 8700b at time of writing.</p>
<p>This will install the anthy libraries in /usr rather than its default of /usr/local. If you prefer to have programs in /usr/local then leave out the --prefix=/usr/ part.</p>
<p>Once anthy is installed, you can download and install <a href="http://sourceforge.net/project/showfiles.php?group_id=108454/">scim</a>. It is installed in the same way</p>
<p><code>tar zxvf scim-</code><version><code>.tar.gz</code><br />
<code>cd scim-</code><version><br />
<code>./configure --prefix=/usr &amp;&amp; make &amp;&amp; make install</code></p>
<p>Lastly do the same with <a href="http://sourceforge.jp/projects/scim-imengine/">scim-anthy</a>. Note that the order of installation is important, first install anthy, then scim, and lastly scim-anthy.</p>
<p>If you install from source, you are often better off installing everything from source. That is, if your distribution has a package for scim, but not scim-anthy, it might put scim in some odd place where scim-anthy won't be able to find it. So, if you have to install any of the three programs from source, install all three of them from source.</p>
<h2 id="environment">Environment</h2>
<p>For scim to work, you must set some environment variables. I've often gotten by with simply setting XMODIFIERS and setting LC_CTYPE to my native locale with UTF-8 encoding.</p>
<p><code>export XMODIFIERS='@im=SCIM'</code><br />
<code>export LC_CTYPE=en_US.utf8</code></p>
<p>However, this doesn't work all the time, which is one reason the quick guide takes a more conservative approach. Sometimes, your native language in UTF-8 will only work if you set the GTK_IM_MODULE and QT_IM_MODULE lines. It might vary with distribution and even application. I haven't found any real pattern to it, though one probably exists.</p>
<p>Setting the LC_CTYPE to Japanese rather than your native language doesn't seem to really affect any of the programs that I use. If you'd rather have the LC_CTYPE in your native language. feel free to try it. If it doesn't work, be sure that you have the GTK_IM_MODULE and QT_IM_MODULE variables set as in the quick start at the beginning of this article.</p>
<p>In the quick start, I say that one should add the variables to their .bash_profile. This way, they're set whenever you log into the system. If you use Ubuntu, Fedora, PCLINUXOS or any of the more popular newcomer friendly distros, they boot up into a graphical environment. However, if you're using Slackware, ArchLinux or Gentoo, you often choose to boot into a console. If you boot into text mode, then you don't necessary need these variables set till you start X. In that case, you might simply put these settings into your .xinitrc. Put it in before the line that calls your window manager, for example</p>
<p><code>export XMODIFIERS='@im=SCIM'</code><br />
<code>export LC_CTYPE=ja_JP.utf8</code><br />
<code>export GTK_IM_MODULE=“scim”</code><br />
<code>export QT_IM_MODULE=“scim”</code><br />
<code>scim -d</code><br />
<code>exec fluxbox</code></p>
<h2 id="locale">Locale</h2>
<p>These days, most distributions include locales by default. Some of them, for example, ArchLinux, don't. With Arch, you have to uncomment the locales that you want to have in /etc/locale.gen then run the command</p>
<p><code>locale-gen</code></p>
<p>With Debian, at one point (I haven't used it for awhile, this may no longer be the case) you had to first install and configure locales.</p>
<p><code>apt-get install locales</code><br />
<code>dpkg-reconfigure locales</code></p>
<p>(This might be what Ubuntu does when you choose to add Japanese support from their System, Administration, Language Support menu, as well as add <a href="#Fonts" title="wikilink">#Fonts</a>. It's possible that rather than installing everything Ubuntu thinks you'll need for Japanese support, just doing the above would suffice.)</p>
<p>Although most distributions use ja_JP.utf8 one should always check this</p>
<p><code>locale | grep ja_JP</code></p>
<p>Sometimes, you might get an answer like ja_JP.utf-8 or ja_JP.UTF8. This is case sensitive so set your LC_CTYPE according to the result. Otherwise, you'll get an error message like locale not supported by environment. (Depending upon the application, you might not see that message, but if for example, you open one terminal from another terminal, you will see it.)</p>
<h2 id="starting_scim">Starting Scim</h2>
<p>In the quick start, scim is started as soon as you log in. It doesn't seem to use too many resources, so this won't really hurt anything. It can be done that way, although if you boot into text mode, you might, as shown above, put it in .xinitrc rather than your
.bash_profile. However, if you only use it on rare occasions, you eliminate that line in your startup file (whether it be .bash_profile or .xinitrc) and just call it when needed. Open a terminal window and type</p>
<p><code>scim -d</code></p>
<p>Once scim starts, you can then use it in your applications. (It might not work in the terminal that you used to start it, however. Also, if you already have, for example, firefox running, you might have to restart firefox to get scim to work with it.</p>
<h2 id="fonts">Fonts</h2>
<p>Many distributions include Japanese fonts by default. However, if they don't, you'll have to install them. With Ubuntu, fonts are installed if you choose to add Japanese support. With RedHat and its offshoots, one can search for Japanese fonts with</p>
<p><code>yum search fonts-ja</code></p>
<p>At different times, I've had different results. For instance, CentOS offered ttfonts-ja, Fedora offered something like fonts-japanese.noarch. Regardless, the search for fonts-ja usually gave me results. In ArchLinux one adds ttf-arphic-uming and ttf-arphic-ukai with pacman.</p>
<p>One can always donwnload the substitute kochi fonts from
<a href="http://download.sourceforge.jp/efont/5411/">sourceforge.jp</a>. Get the package kochi-substitute-20030809.tar.bz2. Decompress and untar it, and it will create a kochi-substitute-20030809 directory. In the directory you'll see two files with a ttf ending, the kochi-gothic and kochi-mincho substitute fonts. Move them into one of the directories that your distribution searches for fonts--as mentioned above, you can grep FontPath in /etc/X11/xorg.conf.</p>
<p>For the beginner, you decompress and untar it with</p>
<p><code>tar jxvf kochi-substitute-20030809.tar.bz2</code></p>
<p>Most font directories (a popular location on many distros is /usr/X11R6/lib/X11/fonts) will already have a truetype, TrueType or TTF directory. Move the fonts into one of those (after making sure that directory is listed in your xorg.conf's FontPaths.)</p>
<h2 id="terminals">Terminals</h2>
<p>If you wish to use Japanese in an xterm with mutt or other text files, you will also need a terminal capble of displaying Japanese. Not every terminal can display UTF-8 encoding. Some terminals can't display any Asian characters, others, such as rxvt and mrxvt, will be able to use the older EUC encoding, but not UTF-8. The default xterm cannot display Japanese, however, these days, most systems also install uxterm, which can display UTF-8. If you use Gnome, KDE, or Xfce, their default terminals work. The vim editor usually has no trouble with Japanese, however, Slackware and some others actually use elvis. (The BSD's use nvi). One way to tell is do</p>
<p><code>which vi</code></p>
<p>You might get an answer like</p>
<p><code>/usr/bin/vi</code></p>
<p>Now do</p>
<p><code>ls -l /usr/bin/vi</code></p>
<p>In Slackware, you'd see something like</p>
<p><code>/usr/bin/vi -&gt; /usr/bin/elvis</code></p>
<p>Install vim (it's available as a Slackware package) if it's not already installed, and change the symbolic link to point to vim. For example</p>
<p><code>cd /usr/bin</code><br />
<code>rm vi</code><br />
<code>ln -s vim vi</code></p>
<p>Make sure vim is in /usr/bin first by typing the command</p>
<p><code>which vim</code></p>
<h2 id="using_scim">Using scim</h2>
<p>To switch to Japanese conversion, hit Ctrl+space. You should see a small widget appear in the lower right hand corner of your screen. If you type in romaji, for example shi, you should then see the hiragana for shi. Hitting the space bar will bring up a list of kanji--you can navigate the kanji with the arrow keys. Hitting space again will select the kanji that you've chosen.</p>
<p>In a few recent Fedora 7 installations, Ctl+space didn't work. Generally, when scim-anthy is installed, a $HOME/.scim/config file is created, with various defaults, includng that of using Ctl+space to open and close the input widget. In these Fedora installs, that line was blank. The scim-anthy application itself was working without problem, as long as I clicked on the icon it placed in the upper right of the Gnome screen when I started scim.</p>
<p>In this case, I was able to fix it by opening my $HOME/.scim/config file and adding the line</p>
<p><code>/Hotkeys/FrontEnd/Trigger = Control+space</code></p>
<p>to it. (Note that you can use other key combinations if you prefer--I find that Ctrl+space is convenient for me, and these Fedora installs aside, it is the default.)</p>
<p>If you are in an application that will not support scim, for example a standard xterm, then when you hit Ctl+space you won't see anything. If you see kana, but only see squares when you hit the space bar to bring up kanji, it means (and this is in the scim FAQ) that scim can't find the fonts. Check your font paths in xorg.conf with</p>
<p><code>grep FontPath /etc/X11/xorg.conf</code></p>
<p>and make sure that some Japanese fonts are there. (See <a href="#Fonts" title="wikilink">#Fonts</a>)</p>
<h2 id="freebsd">FreeBSD</h2>
<p>Once again, the quick start.</p>
<ul>
<li>Install scim-anthy (using ports will also pull in scim and anthy)</li>
</ul>
<p><code>cd /usr/ports/japanese/scim-anthy</code><br />
<code>make install clean</code></p>
<ul>
<li>Install fonts</li>
</ul>
<p><code>cd /usr/ports/japanese/kochi-ttfonts</code><br />
<code>make install clean</code></p>
<ul>
<li>If you boot up into graphical mode, add the following to your shell's profile (The syntax here is for Bourne style shells, sh, bash, zsh and ksh.) If booting up into text mode, then add the lines to your .xinitrc above the line which calls your window manager as explained above in <a href="#Environment" title="wikilink">#Environment</a> <a href="#Locale" title="wikilink">#Locale</a> and <a href="#Starting_Scim" title="wikilink">#Starting Scim</a></li>
</ul>
<p><code>export XMODIFIERS='@im=SCIM'</code><br />
<code>export LC_CTYPE=ja_JP.UTF-8</code><br />
<code>export GTK_IM_MODULE=“scim”</code><br />
<code>export QT_IM_MODULE=“scim”</code><br />
<code>scim -d</code></p>
<p>The rest is the same as <a href="#The_Super_Quick_Version" title="wikilink">#The Super Quick Version</a> for Linux.
The only real difference here is that while most versions of Linux use ja_JP.utf8, FreeBSD uses ja_JP.UTF-8. As previously mentioned, when setting LC_CTYPE, case is important.</p>
<h2 id="netbsd">NetBSD</h2>
<p>The quickstart version of NetBSD doesn't use scim-anthy, however, as mentioned at the very beginning of this article, I didn't feel it was worth giving it a separate page. The basic concepts are relatively similar.</p>
<p>NetBSD's pkgsrc doesn't yet have scim-anthy. It does, however, have anthy and uim, another popular input method.</p>
<ul>
<li>Install the needed programs</li>
</ul>
<p><code>cd /usr/pkgsrc/inputmethod/anthy</code><br />
<code>make install clean; make clean-depends</code><br />
<code>cd /usr/pkgsrc/inputmethod/uim</code><br />
<code>make PKG.OPTIONS.uim="-canna' install clean; make clean-depends</code></p>
<ul>
<li>Install fonts</li>
</ul>
<p><code>cd /usr/pkgsrc/fonts/kochi-ttf</code><br />
<code>make install clean; make clean-depends</code></p>
<ul>
<li>Install a Japanese locale</li>
</ul>
<p><code>ftp </code><a href="ftp://ftp.NetBSD.org"><code>ftp://ftp.NetBSD.org</code></a></p>
<p>After you're connected</p>
<p><code>cd pub/NetBSD/NetBSD-current/src/share/locale/ctype</code><br />
<code>get en_US.UTF-8.src</code></p>
<p>For our example, we'll assume that you logged on as user joe and put the UTF-8.src file in your home directory</p>
<p><code>cd /usr/share/locale</code><br />
<code>sudo make locale &lt; /home/joe/en_US.UTF-8.src &gt; ja_JP.UTF-8</code></p>
<ul>
<li>Add the following to your .xinitrc above the line calling your window manager</li>
</ul>
<p>(I'm not sure if you'd use the &amp; if you boot into X and add it to your shell's profile--most of the NetBSD users I know boot into text mode though)</p>
<p><code>export XMODIFIERS=@im=uim</code><br />
<code>uim-xim --engine=anthy &amp;</code></p>
<ul>
<li>Start x</li>
<li>Hit shift+space to open the input manager. Select kanj in the same way that you do with scim, typing in romaji, seeing hiragana and hitting the space bar to bring up a list of kanji.</li>
<li>To stop using uim, hit shift+space again</li>
</ul>
<p>NetBSD also has a collection of WIP (Work in Progress) <a href="http://pkgsrc-wip.sourceforge.net/">packages</a>. (That link takes you to the main page, which explains how to download and install the WIP tree.) As the page explains, you untar the WIP pkgsrc tree in your /usr/pkgsrc directory. Then, you can cd into the WIP scim-anthy directory and do the usual make install clean; make clean-depends.</p>
<p>If the package fails to build with an unable to allocate memory error, add the following to the scim-anthy Makefile's configuration options. (If you look at the Makefile, it will be fairly plain where these are.)</p>
<p><code>UNLIMIT_RESOURCES=      datasize</code></p>
<p>After that scim-anthy can be used in the same way it's used with Linux or FreeBSD, adding the various XMODIFIER and LC_CTYPE lines to your .xinitrc, along with scim -d if you want it to always be running. It will then be called with Ctrl+space and work as you would expect, entering romaji, seeing hiragana and hitting the space bar to view available kanji.</p>
<p><a href="./Category:Japanese_And_Linux_Howto">Category:Japanese_And_Linux_Howto</a></p>
    </div>

    <div id="footer">
      <div id="sponsor">
        <!--<p>The TLUG web page is hosted by the award-winning Internet provider <a href="http://asahi-net.jp/en/">ASAHI Net.</a></p>
        <p><a href="/wiki/TLUG_Archvie_Server">TLUG's archive server</a> is hosted by <a href="http://www.networld.ne.jp">K.K. NETWORLD</a></p>-->
      </div>

      <div id="copyright">
        <p>Homepage of the Tokyo Linux Users Group. All rights reserved.<br />
        Established June 16, 1994</p>
      </div>
    </div>
    <script type="text/javascript">
      var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
      document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>
    <script type="text/javascript">
      var pageTracker = _gat._getTracker("UA-5555263-2");
      pageTracker._trackPageview();
    </script>
  </body>
</html>
